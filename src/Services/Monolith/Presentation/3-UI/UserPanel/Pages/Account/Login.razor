@page "/login"
@attribute [AllowAnonymous]

@using System.Web
@using TaskoMask.Application.Share.Dtos.Authorization.Users
@inject TaskoMask.Presentation.UI.UserPanel.Services.Authentication.IAuthenticationService AuthenticationService

<section id="cover">
    <div id="cover-caption">
        <div class="container">
            <div class="row text-white">
                <div class="col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4">
                    <h3 class=" py-2 ">Login to TaskoMask!</h3>
                    <div class="px-2">
                        <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">

                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <InputText @bind-Value="LoginModel.UserName" placeholder="UserName" class="form-control"></InputText>
                                <ValidationMessage For="()=>LoginModel.UserName" class="text-danger"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <InputText type="password" @bind-Value="LoginModel.Password" placeholder="Password" class="form-control"></InputText>
                                <ValidationMessage For="()=>LoginModel.Password" class="text-danger"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <button id="loginBtn" type="submit" class="btn btn-success">Login</button>
                                <a id="registerBtn" class="btn btn-outline-primary" href="/register">Register</a>
                            </div>
                        </EditForm>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {


    #region Fields and Parameters


    UserLoginDto LoginModel = new UserLoginDto();


    #endregion Fields and Parameters




    #region private Methods


    /// <summary>
    ///
    /// </summary>
    private async Task HandleLogin()
    {
        var loginResult = await AuthenticationService.Login(LoginModel);
        if (loginResult.IsSuccess)
        {
            ComponentMessageService.SendMessage(MessageType.Owner_Loggedin);
            NavigationManager.NavigateTo("/" + GetReturnUrl());
        }
        else
            ToastService.ShowError(loginResult.Errors.ParseToFragment(), loginResult.Message);
    }



    /// <summary>
    ///
    /// </summary>
    private string GetReturnUrl()
    {
        var absoluteUri = new Uri(NavigationManager.Uri);
        var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
        return queryParam["returnUrl"] ?? "";
    }


    #endregion private Methods

}